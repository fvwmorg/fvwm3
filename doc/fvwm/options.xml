<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "../docbook-xml/docbookx.dtd"
[
<!ENTITY % myents SYSTEM "../fvwm3.ent" >
%myents;
]>

<!-- $Id$ -->

<section id='Options'>
<title>Options</title>

<para>These are the command line options that are recognized by fvwm:</para>
<variablelist remap='TP'>
  <varlistentry>
  <term>
    <option>-i</option> | <option>--clientid</option>
    <replaceable>id</replaceable>
  </term>
  <listitem>
<para>
This option is used when fvwm is started by a session
manager. Should not be used by a user.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-c</option> | <option>--cmd</option>
    <replaceable>config-command</replaceable>
  </term>
  <listitem>
<para>
Causes fvwm to use
<replaceable>config-command</replaceable>
instead of
'<fvwmref cmd="Read"/>
<emphasis remap='I'>config</emphasis>'
(or '<fvwmref cmd="Read"/>
<emphasis remap='I'>.fvwm2rc</emphasis>')
as its initialization command.  (Note that up to 10
<option>-f</option> and <option>-c</option>
parameters can be given, and they are executed in the order
specified.)</para>

<para>Any module started by command line arguments is assumed to be a
module that sends back config commands.  All command line modules
have to quit before fvwm proceeds on to the StartFunction and
setting border decorations and styles.  There is a potential
deadlock if you start a module other than <fvwmref mod="FvwmCpp"/>/<fvwmref mod="FvwmM4"/>/<fvwmref mod="FvwmPerl"/>
but there is a timeout so fvwm eventually gets going.</para>

<para>As an example, starting the pager this way hangs fvwm until
the timeout, but the following should work well:</para>

<programlisting>
fvwm -c "<fvwmref cmd="AddToFunc"/> StartFunction I <fvwmref cmd="Module"/> <fvwmref mod="FvwmPager"/>"
</programlisting>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-d</option> | <option>--display</option>
    <replaceable>displayname</replaceable>
  </term>
  <listitem>
<para>
Manage the display called
<replaceable>displayname</replaceable>
instead of the name obtained from the environment variable
<envar>$DISPLAY</envar>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-D</option> | <option>--debug</option>
  </term>
  <listitem>
<para>Puts X transactions in synchronous mode, which dramatically slows
things down, but guarantees that fvwm's internal error messages
are correct.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-f</option>
    <replaceable>config-file</replaceable>
  </term>
  <listitem>
<para>Causes fvwm to read
<replaceable>config-file</replaceable>
instead of
<filename>~/.fvwm/config</filename>
as its initialization file. <envar>$FVWM_USERDIR</envar> can also be used to 
change location of default user directory <filename>~/.fvwm</filename>.</para> 
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-h</option> | <option>--help</option></term>
  <listitem>
<para>A short usage description is printed.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-r</option> | <option>--replace</option></term>
  <listitem>
<para>Try to take over from a previously running wm.  This does not work
unless the other wm is
<acronym>ICCCM2</acronym>
2.0 compliant.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-F</option> | <option>--restore</option>
    <replaceable>state-file</replaceable>
  </term>
  <listitem>
<para>
This option is used when fvwm is started by a session manager.
Should not be used by a user.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-s</option> | <option>--single-screen</option>
    <optional><replaceable>screen_num</replaceable></optional>
  </term>
  <listitem>
<para>
On a multi-screen display, run fvwm only on the screen named in
the
<envar>$DISPLAY</envar>
environment variable or provided through the
<option>-d</option>
option. The optional argument
<replaceable>screen_num</replaceable>
should be positive or null and override the screen number.
Normally, fvwm attempts to start up on all screens of a
multi-screen display.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-V</option> | <option>--version</option></term>
  <listitem>
<para>Prints the version of fvwm to
<filename>stderr</filename>.
Also prints an information about the compiled in support for
readline, rplay, stroke, xpm, png, svg, <acronym>GNOME</acronym> hints, <acronym>EWMH</acronym> hints,
session management, bidirectional text, multibyte characters,
RandR and Xft aa font rendering.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-C</option> | <option>--visual</option>
    <replaceable>visual-class</replaceable>
  </term>
  <listitem>
<para>
Causes fvwm to use
<replaceable>visual-class</replaceable>
for the window borders and menus.
<replaceable>visual-class</replaceable>
can be "StaticGray", "GrayScale", "StaticColor", "PseudoColor",
"TrueColor" or "DirectColor".</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-I</option> | <option>--visualid</option>
    <replaceable>id</replaceable>
  </term>
  <listitem>
<para>
Causes fvwm to use
<replaceable>id</replaceable>
as the visual id for the window borders and menus.
<replaceable>id</replaceable>
can be specified as N for decimal or 0xN for hexadecimal. See man
page of xdpyinfo for a list of supported visuals.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>
    <option>-l</option> | <option>--color-limit</option>
    <replaceable>limit</replaceable>
  </term>
  <listitem>

<para>Specifies a <replaceable>limit</replaceable> on the colors
used in image, gradient and possibly simple colors used by
fvwm. In fact, fvwm (and all the modules) uses a palette with at
most <replaceable>limit</replaceable> colors. This option is only
useful with screens that display 256 colors (or less) with a
dynamic visual (PseudoColor, GrayScale or DirectColor). The
default depends on your X server and how you run fvwm. In most
case this default is reasonable. The <option>-l</option> option
should be used only if you encounter problems with colors.  By
default, fvwm tries to detect large pre-allocated palettes. If
such a palette is detected fvwm uses it and a priori the
<option>-l</option> must not be used. Moreover, in this case the
<option>-A</option> and <option>-S</option> options are
forced. Note that XFree-4.2 pre-allocates 244 colors (if you use a
driver with Render support) leaving only a few free colors. This
may lead to some color problems (and nothing can be
done). XFree-4.3 or better pre-allocate only 85 colors.  If no
pre-allocated palette is auto detected the defaults are as
follow:</para>

<variablelist>
  <varlistentry>
    <term>Display depth 8 (256 colors)</term>
    <listitem>
      <simplelist>
	<member>PseudoColor: 68 (4x4x4 color cube + 4 grey)</member>
	<member>GrayScale: 64 regular grey</member>
	<member>DirectColor: 32 (3x3x3 color cube + 5 grey)</member>
      </simplelist>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>Display depth 4 (16 colors)</term>
    <listitem>
      <simplelist>
	<member>PseudoColor: 10 (2x2x2 color cube + 2 grey)</member>
	<member>GrayScale: 8 regular grey</member>
	<member>DirectColor: 10 (2x2x2 color cube + 2 grey)</member>
      </simplelist>
    </listitem>
  </varlistentry>
</variablelist>

<para>Note that if
you use a private color map (i.e., fvwm is started with the
<option>-C</option> or the <option>-I</option> options), then
other defaults are used.</para>

<para>Now what to do if you encounter problems with colors? The first
thing to do is to check if you really cannot run your X server
with depth 15, 16 or better.  Check your X server
documentation. Note that some hardware can support two different
depths on the same screen (typically depth 8 and depth 24). If
depth 8 is the default, you can force fvwm to use the best depth
by using the
<option>-C</option>
option with
<emphasis remap='I'>TrueColor</emphasis>
as argument.  So now we assume that you are forced to run in depth
8 with a dynamic visual because your hardware/driver cannot do
better or because you need to use an application which needs to
run under this mode (e.g., because this application needs
read-write colors). What it should be understand is that you have
only 256 colors and that all the applications which use the
default color map must share these colors. The main problem is
that there are applications which use a lot or even all the
colors.  If you use such application you may have no more free
colors and some applications (which used only a few colors) may
fail to start or are unusable. There are three things that can be
done (and fvwm does not really play a particular role, all
applications are concerned). The first is to run the applications
which waste your (default) color map with a private color map. For
example, run netscape with the -install option, run <acronym>KDE</acronym>
or <acronym>QT</acronym>
applications with the --cmap option, use the
<option>-C</option>
option for fvwm. The disadvantage of this method is that it is
visually disturbing (see the
<fvwmref cmd="ColormapFocus"/>
command for a better control of the color maps switching). The
second method is to limit the number of colors that the
applications use. Again, some applications have options to
specify a given color limit. With fvwm you may try various values,
61 (a special "visual" palette), 56 (a 4x4x3 color cube plus 6
grey), 29 (a 3x3x3 color cube plus 2 grey), 10 or 9. Also, you may
use the
<option>-L</option>
option.  However, limiting the number of colors is not the
definitive solution. The definitive solution is to try cause
applications which use a lot of colors use the same colors. This
is a difficult task as there are no formal standards for this
goal. However, some toolkits as <acronym>QT</acronym> and
<acronym>GTK</acronym> use color cubes as
palettes. So, the idea is to configure your applications/toolkits
to all use the same color cube. Moreover, you can use the colors
in this color cube in your X resources configuration files and/or
as arguments to colors options.
Fvwm can use any color cube of the form RxGxB with 2 &lt;= R &lt;= 6, R
= G, R-1 =&lt; B &lt;= R and B &gt;= 2. To get an RxGxB color cube give an
argument to
<option>-l</option>
an integer c &gt;= R*G*B and &lt; (R+1)*(G+1)*B if B=R and &lt; R*G*(B+1)
if B &lt; R (and different from 61). If c &gt; R*G*B, then some grey may
be added to the color cube. You can use the
<fvwmref cmd="PrintInfo"/>
<emphasis remap='I'>Colors</emphasis>
<optional><emphasis remap='I'>1</emphasis></optional>
command to get information on your fvwm colors setting. In
particular, this command prints the palette used by fvwm in rgb
format (the last integer gives the number of times fvwm has
allocated the colors).</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-L</option> | <option>--strict-color-limit</option></term>
  <listitem>
<para>If the screen displays 256 colors (or less) and has a dynamic visual,
causes fvwm to use its palette for all the colors. By default, the
palette is used only for images and gradients.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-P</option> | <option>--visual-palette</option></term>
  <listitem>
<para>If the screen displays 256 colors (or less) and has a dynamic
visual, this option causes fvwm to use a palette designed for
limiting the "visual" color distance between the points of the
palette. Moreover, for better color sharing, if possible colors
with a name in the X rgb data base are used for defining the
colors (with the hope that applications and images prefer to
use named colors). If the
<option>-l</option>
option is not used this palette has 61 colors. This palette is
also automatically selected if  61 or 9 is used as argument to the
<option>-l</option>
option.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-A</option> | <option>--allocate-palette</option></term>
  <listitem>
<para>If the screen displays 256 colors (or less) and has a dynamic
visual this option causes fvwm to allocate all the colors of its
palette at start up for reserving these colors for future
use. This option forces the
<option>-static-palette</option>
option. By default, fvwm allocates (reserves) a color in its palette
only if it needs this color.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-S</option> | <option>--static-palette</option></term>
  <listitem>
<para>If the screen displays 256 colors (or less) and has a dynamic
visual this option causes fvwm to never free the colors in its
palette. By default, when fvwm does not need a color any more it
frees this color so that a new color can be used. This option may
speed up image loading and save a few bits of memory.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-blackout</option></term>
  <listitem>
<para>This option is provided for backward compatibility only.  Blacking
out the screen during startup is not necessary (and doesn't work)
anymore. This option will be removed in the future.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>--debug-stack-ring</option></term>
  <listitem>
<para>Enables stack ring debugging.  This option is only intended for
internal debugging and should only be used by developers.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-v</option></term>
  <listitem>
<para>Enables debug logging.  Writes in append mode to fvwm log file, 
which is ~/.fvwm/fvwm3-output.log by default. See ENVIRONMENT section on 
how to override this location on fvwm3 startup using 
<envar>$FVWM_USERDIR</envar> or <envar>$FVWM3_LOGFILE</envar> .</para>
  <variablelist>
    <varlistentry>
      <term>Logging can also be dynamically toggled on and off using signals:</term>
      <listitem>
        <simplelist>
      <member><option>SIGUSR1</option> : used as a signal to restart Fvwm</member>
      <member><option>SIGUSR2</option> : used as a signal to toggle opening/closing debug log file</member>
        </simplelist>
      </listitem>
    </varlistentry>
  </variablelist>

  </listitem>
  </varlistentry>
</variablelist>
</section>
