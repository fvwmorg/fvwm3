<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Id$ -->
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "../docbook-xml/docbookx.dtd"
[
<!ENTITY % myents SYSTEM "../fvwm3.ent" >
%myents;
]>


<section id='command_expansion'>
<title>Command Expansion</title>

<para>Whenever an fvwm command line is executed, fvwm performs parameter
expansion.  A parameter is a '$' followed by a word enclosed in
brackets ($[...]) or a single special character.  If fvwm
encounters an unquoted parameter on the command line it expands it
to a string indicated by the parameter name.  Unknown parameters
are left untouched.  Parameter expansion is performed before
quoting.  To get a literal '$' use "$$".</para>

<para>If a command is prefixed with a '-' parameter expansion isn't
performed.  This applies to the command immediately following the '-',
in which the expansion normally would have taken place. When uesed
together with other prefix commands it must be added before the other
prefix.</para>

<para>Example:</para>

<programlisting>
<fvwmref cmd="Pick"/> -<fvwmref cmd="Exec"/> exec xmessage '$[w.name]'
</programlisting>

<para>opens an xmessage dialog with "$[w.name]" unexpanded.</para>



<para>The longer variables may contain additional variables inside the
name, which are expanded before the outer variable.</para>

<para>In earlier versions of fvwm, some single letter variables were
supported.  It is deprecated now, since they cause a number of
problems.  You should use the longer substitutes instead.</para>

<para>Example:</para>

<programlisting>
# Print the current desk number, horizontal page number
# and the window's class (unexpanded here, no window).
<fvwmref cmd="Echo"/> $[desk.n] $[page.nx] $[w.class]
</programlisting>


<para>Note: If the command is called outside a window context, it
prints "$[w.class]" instead of the class name.  It is usually not
enough to have the pointer over a window to have a context window.
To force using the window with the focus, the
<fvwmref cmd="Current"/>
command can be used:</para>

<programlisting>
<fvwmref cmd="Current"/> <fvwmref cmd="Echo"/> $[desk.n] $[page.nx] $[w.class]
</programlisting>

<para>The parameters known by fvwm are:</para>

<variablelist remap='TP'>
  <varlistentry>
    <term>$$</term>
    <listitem><para>A literal '$'.</para></listitem>
  </varlistentry>
  <varlistentry>
    <term>$.</term>
    <listitem>
      <para>
	The absolute directory of the currently Read file.  Intended for
	creating relative and relocatable configuration trees.  If used
	outside of any read file, the returned value is '.'.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$0 to $9</term>
    <listitem>
      <para>
	The positional parameters given to a complex function (a function
	that has been defined with the
	<fvwmref cmd="AddToFunc"/>
	command).  "$0" is replaced with the first parameter, "$1" with
	the second parameter and so on.  If the corresponding parameter is
	undefined, the "$..." is deleted from the command line.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$*</term>
    <listitem>
      <para>
	All positional parameters given to a complex function.  This
	includes parameters that follow after "$9".
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[<replaceable>n</replaceable>]</term>
    <listitem>
      <para>
	The <replaceable>n</replaceable>:th
	positional parameter given to a complex function, counting from 0.
	If the corresponding parameter is undefined, the
	"$[<replaceable>n</replaceable>]" is deleted
	from the command line. The parameter is expanded unquoted.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
     <term>$[<replaceable>n</replaceable>-<replaceable>m</replaceable>]</term>
     <listitem>
       <para>
	 The positional parameters given to a complex function, starting
	 with parameter <replaceable>n</replaceable> and ending with parameter
	 <replaceable>m</replaceable>.
	 If all the corresponding parameters are undefined, the "$[...]" is
	 deleted from the command line. If only some of the parameters are
	 defined, all defined parameters are expanded, and the remaining
	 silently ignored. All parameters are expanded unquoted.
       </para>
     </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[<replaceable>n</replaceable>-]</term>
    <listitem>
      <para>
	All the positional parameters given to a complex function,
	starting with parameter <replaceable>n</replaceable>.
	If all the corresponding parameters are undefined, the "$[...]" is
	deleted from the command line. All parameters are expanded
	unquoted.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[*]</term>
    <listitem>
      <para>
	All the positional parameters given to a complex function. This is
	equivalent of $[0-].
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[version.num]</term>
    <listitem>
      <para>The version number, like "2.6.0".</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[version.info]</term>
    <listitem>
      <para>
	The version info, like " (from cvs)", empty for the official releases.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[version.line]</term>
    <listitem>
      <para>
	The first line printed by the --version command line option.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[vp.x] $[vp.y] $[vp.width] $[vp.height]</term>
    <listitem>
      <para>
	Either coordinate or the width or height of the current viewport.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[wa.x] $[wa.y] $[wa.width] $[wa.height]</term>
    <listitem>
      <para>
	Either coordinate or the width or height of the EWMH working area.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[dwa.x] $[dwa.y] $[dwa.width] $[dwa.height]</term>
    <listitem>
      <para>
	Either coordinate or the width or height of the dynamic EWMH working area.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[desk.n]</term>
    <listitem><para>The current desk number.</para></listitem>
  </varlistentry>
  <varlistentry>
    <term>$[desk.name&lt;n&gt;]</term>
    <listitem>
      <para>
	These parameters are replaced with the name of the desktop
	number &lt;n&gt; that is defined with the
	<fvwmref cmd="DesktopName"/>
	command. If no name is defined, then the default name is returned.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[desk.width] $[desk.height]</term>
    <listitem>
      <para>
	The width or height of the whole desktop, i.e. the width or height
	multiplied by the number of pages in x or y direction.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[desk.pagesx] $[desk.pagesy]</term>
    <listitem>
      <para>
	The number of total pages in a desk in x or y direction.
	This is the same as the values set by
	<fvwmref cmd="DesktopSize"/>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[page.nx] $[page.ny]</term>
    <listitem>
      <para>
	The current page numbers, by X and Y axes, starting from 0.
	<emphasis remap='I'>page</emphasis> is equivalent to
	<emphasis remap='I'>area</emphasis> in the
	<acronym>GNOME</acronym> terminology.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[w.id]</term>
    <listitem>
      <para>
	The window-id (expressed in hex, e.g. 0x10023c) of the window the
	command was called for or "$[w.id]" if no window is associated
	with the command.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      $[w.name] $[w.iconname] $[w.class] $[w.resource]
      $[w.visiblename] $[w.iconfile] $[w.miniiconfile]
      $[w.iconfile.svgopts] $[w.miniiconfile.svgopts]
    </term>
    <listitem>
      <para>
	The window's name, icon name, resource class and resource name,
	visible name, file name of its icon or mini icon defined with the
	<fvwmref cmd="Style" opt="Icon"/> or
	<fvwmref cmd="Style" opt="MiniIcon"/>
	style (including the full path if the file was found on disk),
	and (if fvwm is compiled with <acronym>SVG</acronym> support)
	the icon or mini icon svg rendering options (including the
	leading colon),	or unexpanded "$[w.&lt;attribute&gt;]" string
	if no window is associated with the command.
      </para>
      <para>
	Note, the first 5 variables may include any kind of characters, so
	these variables are quoted.  It means that the value is surrounded
	by single quote characters and any contained single quote is
	prefixed with a backslash.  This guarantees that commands like:

	<programlisting><fvwmref cmd="Style"/> $[w.resource] <fvwmref cmd="Style" opt="Icon"/> norm/network.png</programlisting>

	work correctly, regardless of any special symbols the value may
    contain, like spaces and different kinds of quotes.
      </para>
      <para>
    In the case of the window's visible name, this is the value returned
    from the literal title of the window shown in the titlebar.  Typically
    this will be the same as $[w.name] once expanded, although
    in the case of using <fvwmref cmd="Style" opt="IndexedWindowName"/> then
    this is more useful a distinction, and allows for referencing the
    specific window by its visible name for inclusion in things like
    <fvwmref cmd="Style"/> commands.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[w.x] $[w.y] $[w.width] $[w.height]</term>
    <listitem>
      <para>
	Either coordinate or the width or height of the current window if
	it is not iconified.  If no window is associated with the command
	or the window is iconified, the string is left as is.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[w.desk]</term>
    <listitem>
      <para>
	The number of the desk on which the window is shown.  If the
	window is sticky the current desk number is used.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[w.layer]</term>
    <listitem><para>The layer of the window.</para></listitem>
  </varlistentry>
  <varlistentry>
    <term>$[w.screen]</term>
    <listitem><para>The screen name the window is on.  If RandR is not
		    present, this does not expand.</para></listitem>
  </varlistentry>
  <varlistentry>
    <term>$[cw.x] $[cw.y] $[cw.width] $[cw.height]</term>
    <listitem>
      <para>
	These work like $[w....] but return the geometry of the client
	part of the window.  In other words: the border and title of the
	window is not taken into account.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      $[i.x], $[it.x], $[ip.x]
      $[i.y], $[it.y], $[ip.y]
      $[i.width], $[it.width], $[ip.width]
      $[i.height], $[it.height], $[ip.height]
    </term>
    <listitem>
      <para>
	These work like $[w....] but return the geometry of the icon
	($[i....]), the icon title ($[it....]) or the icon picture
	($[ip....]).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[pointer.x] $[pointer.y]</term>
    <listitem>
      <para>
	These return the position of the pointer on the screen.  If the
	pointer is not on the screen, these variables are not expanded.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[pointer.wx] $[pointer.wy]</term>
    <listitem>
      <para>
	These return the position of the pointer in the selected window.  If
	the pointer is not on the screen, the window is iconified
	or no window is selected, these variables are not expanded.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[pointer.cx] $[pointer.cy]</term>
    <listitem>
      <para>
	These return the position of the pointer in the client portion of
	the selected window.  If the pointer is not on the screen, the
	window is shaded or iconified or no window is selected, these
	variables are not expanded.
      </para>
    </listitem>
    </varlistentry>
  <varlistentry>
    <term>$[pointer.screen]</term>
    <listitem>
        <para>
        The screen name the pointer is currently on.  No expansion if
        RandR is not enabled.
	</para>
	<para>
	This command is deprecated; use $[monitor.current] instead.
	</para>

    </listitem>
    </varlistentry>
  <varlistentry>
	  <term>$[monitor.&lt;n&gt;.x], $[monitor.&lt;n&gt;.y],
		  $[monitor.&lt;n&gt;.width],
		  $[monitor.&lt;n&gt;.height], $[monitor.primary],
		  $[monitor.current], $[monitor.output], $[monitor.count]
	  </term>
	<listitem>
	<para></para>
	<para>
	Returns information about the selected monitor.  These can be nested,
	for example:  $[monitor.$[monitor.primary].width]
	</para>

	<para>&lt;n&gt; should be a valid xrandr(1) output name.</para>

	<para>
	"x" returns the monitor's x position;
	"y" returns the monitor's y position;
	"width" returns the monitor's width (in pixels);
	"height" returns the monitor's height (in pixels)
	</para>
	<para>
	"current" is the same as the deprecated $[screen.pointer] variable;
	the monitor which has the mouse pointer.
	</para>
	<para>
	"count" returns the number of active monitors.
	</para>

	<para>"primary" is the name of the output set as primary via xrandr(1).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[screen]</term>
    <listitem>
      <para>
	The screen number fvwm is running on.  Useful for setups with
	multiple screens.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[screen.count]</term>
    <listitem>
      <para>
	The total number of screens detected.  Assumes RandR.
      </para>
      <para>This is deprecated; use $[monitor.count] instead.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      $[fg.cs&lt;n&gt;]
      $[bg.cs&lt;n&gt;]
      $[hilight.cs&lt;n&gt;]
      $[shadow.cs&lt;n&gt;]
      $[fgsh.cs&lt;n&gt;]
    </term>
    <listitem>
      <para>
	These parameters are replaced with the name of the foreground
	(fg), background (bg), hilight (hilight), shadow (shadow), or
        the font shadow (fgsh) color that is defined in colorset &lt;n&gt;
        (replace &lt;n&gt; with zero or a positive integer).  For example
        "$[fg.cs3]" is expanded to the name of the foreground color of
        colorset 3 (in rgb:rrrr/gggg/bbbb form).
      </para>
      <para>
        If .lighten&lt;p&gt; or .darken&lt;p&gt; is appeneded to the
        parameters, they are instead replaced with a color that is
        lighter or darker than the one defined in colorset &lt;n&gt;
        by a percentage value &lt;p&gt; (between 0 and 100). For example
        "$[bg.cs3.lighten15]" is expanded to the background color of
        colorset 3 and then lightened 15% (in rgb:rrrr/gggg/bbbb form).
      </para>
      <para>
        If .hash is appened to the end the color output will use
        #rrggbb form (instead of rgb:rrrr/gggg/bbbb). For example,
        $[bg.cs3.hash] or $[bg.cs3.lighten15.hash].
      </para>
      <para>
        Please refer to the
	<fvwmref sect="colorsets" opt="colorsets" name="Colorsets"/>
	section for details about colorsets.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[schedule.last]</term>
    <listitem>
      <para>
	This is replaced by the id of the last command that was
	scheduled with the <fvwmref cmd="Schedule"/> command, even if
	this command was already executed.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[schedule.next]</term>
    <listitem>
      <para>
	This is replaced by the id the next command used with
	<fvwmref cmd="Schedule"/> will get (unless a different id is
	specified explicitly).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[cond.rc]</term>
    <listitem>
      <para>
	The return code of the last conditional command.  This
	variable is only valid inside a function and can not be used
	in a conditional command.  Please refer to the section
	<fvwmref sect="conditionalCommands" opt="conditional_commands"
	name="Conditional Commands"/> in the command list.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[func.context]</term>
    <listitem>
      <para>
	The context character of the running command as used in the
	<fvwmref cmd="Mouse"/>,
	<fvwmref cmd="Key"/> or
	<fvwmref cmd="PointerKey"/>
	command.  This is useful for example with:
	<programlisting><fvwmref cmd="Mouse"/> 3 FS N <fvwmref cmd="WindowShade"/> $$[func.context]</programlisting>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>$[gt.<replaceable>str</replaceable>]</term>
    <listitem>
      <para>
	return the translation of
	<replaceable>str</replaceable> by looking in the current
	locale catalogs. If no translation is found
	<replaceable>str</replaceable> is returned as is.  See the
	<fvwmref cmd="LocalePath"/> command.
      </para>
    </listitem>
</varlistentry>
  <varlistentry>
      <term>$[infostore.<replaceable>key</replaceable>]</term>
      <listitem>
          <para>Return the value of the item stored in the
              InfoStore at the given <replaceable>key</replaceable>.
                If no key is present, the unexpanded string is returned.
            </para>
        </listitem>
    </varlistentry>
  <varlistentry>
    <term>$[...]</term>
    <listitem>
      <para>
	If the string within the braces is neither of the above, fvwm
	tries to find an environment variable with this name and replaces
	its value if one is found (e.g. "$[PAGER]" could be replaced by
	"more").  Otherwise the string is left as is.
      </para>
    </listitem>
  </varlistentry>
</variablelist>


<para>Some examples can be found in the description of the
<fvwmref cmd="AddToFunc"/>
command.</para>

</section>
